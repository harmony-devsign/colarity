(function() {

  if (!/(iPad|iPhone|iPod)/i.test(navigator.userAgent)) return;

  var doc = document;
  var html = doc.documentElement;
  var touchPoints = {};
  var maxMovement = 10;

  HTMLElement.prototype.dispatchEvent = (function(dispev) {

    return function(ev) {
      
      // mark the click event so we can determine this event was generated by us
      if (ev.type === 'click') {
        Object.defineProperty(ev, 'fastclick_marker', { value: true, enumerable: false })
      }

      dispev.call(this, ev);
      
    };

  })(HTMLElement.prototype.dispatchEvent);

  HTMLElement.prototype.click = function() {
    var evt = this.ownerDocument.createEvent('MouseEvents');
    evt.initMouseEvent('click', true, true, this.ownerDocument.defaultView, 1, 0, 0, 0, 0, false, false, false, false, 0, null);
    this.dispatchEvent(evt);
  }

  // we want to cancel native click events, we catch them as they start to tunnel from the document.
  doc.addEventListener('click', function(e) {

    if (e.fastclick_marker) return;

    e.preventDefault();
    e.stopImmediatePropagation();

  }, true);
  
  doc.addEventListener('touchstart', function(e) {
    
    for(var i = 0;i<e.changedTouches.length;i++) {

      var touch = e.changedTouches[i];
      touchPoints[touch.identifier] = {
        pageX: touch.pageX,
        pageY: touch.pageY
      };

    }

  }, false);
  
  doc.addEventListener('touchend', function(e) {
    
    for(var i = 0;i<e.changedTouches.length;i++) {

      var touch = e.changedTouches[i];
      var start = touchPoints[touch.identifier];

      delete touchPoints[touch.identifier];

      if (Math.abs(touch.pageX - start.pageX) > maxMovement || Math.abs(touch.pageY - start.pageY) > maxMovement) return;

      var el = touch.target.ownerDocument.elementFromPoint(touch.clientX, touch.clientY);
      
      var ev = el.ownerDocument.createEvent('MouseEvents');
      ev.initMouseEvent('click', true, true, window, 1, touch.screenX, touch.screenY, touch.clientX, touch.clientY, false, false, false, false, 0, null);

      el.dispatchEvent(ev);

    }

    // var touch = e.changedTouches[0];
    
    // if (!tapAbort) {

    //   var el = doc.elementFromPoint(touch.clientX, touch.clientY);
      
    //   var ev = doc.createEvent('MouseEvents');
    //   ev.initMouseEvent('click', true, true, window, 1, touch.screenX, touch.screenY, touch.clientX, touch.clientY, false, false, false, false, 0, null);

    //   el.dispatchEvent(ev);

    // }
    
    // tapAbort = false;
    
  }, false);
  
  doc.addEventListener('touchcancel', function(e) {
    
    for(var i = 0;i<e.changedTouches.length;i++) {
      var touch = e.changedTouches[i];
      delete touchPoints[touch.identifier];
    }
    
  }, false);

  
})();